# Tags

Tags are labels that consist of a name and description and you apply them to a commit. The idea is that you add a tag to provide information about each commit. For example, in technical documentation, you might add a tag to indicate:

* A particular product version
* A particular documentation release
* Milestones in the documentation process, such as ready-for-review or review-complete
* Extra information, such as pre-migration, pre-takeover, etc.
* Automation. Tags can be used to trigger automated builds and deployments, for example, publish-docs.

Note that a tag is for a snapshot of the entire repository at a given point in time. It is for the commit, not individual files and folders. 


## How to create a tag

You create tags locally on your computer and then push them (upload) to GitHub. Each tag consists of a name and a description. 

If you are using Visual Studio Code, you can use the **Git Graph** extension to add tags without using a terminal command (yay!). Once it is installed:

1. Install the Git Graph extension in Visual Code Studio.
2. Select the **Source Control** icon in the side menu.
3. Expand the **Graph** section.  
4. Right-click on the relevant commit and select **Create Tag**.

    ![Screenshot of Git Graph extension for Visual Studio Code. It has a Create tag option.](./Media/create-tag-git-graph-extension.jpg)

5. Add a name in the field at the top and press Enter.

    ![Screenshot of Visual Studio Code field for entering tag name and description.](./Media/enter-tag-name.jpg)

6. Enter a description in the field at the top and press Enter.

To view the tag, hover the cursor over the commit in the Graph section. A pop-up appears showing the tags for the commit.

 ![Screenshot of Visual Studio Code field for entering tag name and description.](./Media/tag-in-git-graph-extension.jpg)

### Using a terminal command to create a tag

If you prefer to use a terminal command to create a tag:

1. Find the commit you want to tag.
    Use `git log --oneline` to get a list of recent commits or `git log` to get a full commit history.
    There are other ways to find commits too, including search by date or author.

2. Using terminal, enter:
    
    ```bash
    git tag -a tagname -m "tag description" commit hash

    ```

    For example:
    
    ```
    git tag -a v2.1-docs -m "Documentation for Acme-Product 2.1" e83c516
    ```

## Can a commit have more than one tag?

Oh yes. Next question.

## How to delete a tag
